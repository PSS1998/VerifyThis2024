// task a, b, c, d are done

import <decreases/int.vpr>

function permute(start: Int, end: Int): Seq[Int]
    requires start >= 0 && end > 0 && end-start >= 0
    ensures |result| == end-start
    ensures forall i: Int, j:Int :: (((0 <= i) && (i < (end-start)) && (0 <= j) && (j < (end-start)) && (j != i)) ==> ((result[i] != result[j])))
    ensures forall i: Int :: (0 <= i && i < (end-start)) ==> ((result[i] < end) && (result[i] >= start))

function get_q(m: Int, n: Int): Int
    ensures result*m <= n && (result + 1)*m > n
    ensures result >= 0

method CopySubsegment(SRC: Array, DEST: Array, start: Int, end: Int)
    requires array(SRC)
    requires array(DEST)
    requires len(SRC) == len(DEST)
    requires start >= 0 && end > start
    requires start < len(SRC) && end <= len(SRC)
    ensures  array(SRC)
    ensures  array(DEST)
    ensures len(SRC) == len(DEST)
    decreases
{
    var jj: Int := 0
    var permu: Seq[Int] := permute(start, end)
    assert (forall i: Int, j:Int :: 0 <= i && i < (end-start) && 0 <= j && j < (end-start) && j != i ==> permu[i] < end && permu[i] >= start && permu[i] != permu[j])
    assert (forall i: Int :: (0 <= i && i < (end-start)) ==> ((permu[i] < end) && (permu[i] >= start)))
    assert (permu[0] < end)

    while (jj < |permu|)
    invariant array(SRC)
    invariant array(DEST)
    invariant len(SRC) == len(DEST)
    invariant jj>=0
    invariant jj <= |permu|
    invariant start < len(SRC) && end <= len(SRC)
    invariant forall i: Int, j:Int :: 0 <= i && i < (end-start) && 0 <= j && j < (end-start) && j != i ==> permu[i] < end && permu[i] >= start && permu[i] != permu[j]
    invariant (jj < |permu|) ==> (permu[jj] < end)
    decreases (end - jj)
    {
        assert permu[jj] < end && permu[jj] >= start
        update(DEST, permu[jj], lookup(SRC, permu[jj]))
        jj := jj+1
    }
}

method lemma_mult(n: Int, m: Int, k:Int)
    requires n >= 0 && m >= 0
    requires n >= m && k > 0 
    ensures (n*k >= m*k)
    decreases
{
    assert (n*k >= m*k)
}

method CopySegment(SRC: Array, DEST: Array, k: Int, l: Int, start: Int, end: Int)
    requires array(SRC)
    requires array(DEST)
    requires len(SRC) == len(DEST)
    requires start >= 0 && end > start
    requires start < len(SRC) && end <= len(SRC)
    requires k > 0 && l > 1
    requires (end - start) == l*k
    ensures  array(SRC)
    ensures  array(DEST)
    ensures len(SRC) == len(DEST)
    decreases
{
    var j: Int := 0

    while (j < l)
    invariant array(SRC)
    invariant array(DEST)
    invariant len(SRC) == len(DEST)
    invariant j >= 0 
    invariant k > 0 && l > 1
    invariant  end <= len(SRC)
    invariant ((end - start) == l*k)
    invariant (j<l) ==>((j+1) <= l)
    decreases (l - j)
    { 
        assert j<l
        var start2: Int := start + j*k
        var end2: Int := start + (j+1)*k
        assert j < l
        assert (j+1) <= l
        assert k>0
        lemma_mult( l, (j+1), k)
        assert ((j+1)*k) <= l*k
        
        CopySubsegment(SRC, DEST, start2, end2)
        j := j+1
    }
}



method SmartCopy0(SRC: Array, DEST: Array, k: Int, l: Int)
    requires array(SRC)
    requires array(DEST)
    requires len(SRC) == len(DEST)
    requires k > 0 && l > 1
    ensures  array(SRC)
    ensures  array(DEST)
    ensures len(SRC) == len(DEST)
    decreases
{
    var m: Int := k*l
    var n: Int := len(SRC)
    var q: Int := get_q(m, n)
    var r: Int := n - (q*m)
    assert r<=n

    assert (n == (q*m + r))

    var i: Int := 0
    var j: Int := q*m

    while (i < q)
    invariant array(SRC)
    invariant array(DEST)
    invariant len(SRC) == len(DEST)
    invariant i>=0
    decreases (q - i)
    {
        var start: Int := i*m
        var end: Int := (i+1)*m
        lemma_mult( q, (i+1), m)
        CopySegment(SRC, DEST, k, l, start, end)
        i := i+1
    }

    assert j<= len(SRC)
    assert len(DEST) == n
    
    while (j < n)
    invariant array(SRC)
    invariant array(DEST)
    invariant len(SRC) == len(DEST)
    invariant j >= 0 
    decreases (n - j)
    {
        assert j<n
        update(DEST, j, lookup(SRC, j))
        j := j+1
    }
        

}

field val: Int 
domain Array {
    function loc(a: Array, i: Int): Ref
    function len(a: Array): Int
    function first(r: Ref): Array
    function second(r: Ref): Int

    axiom injectivity {
        forall a: Array, i: Int :: {loc(a, i)}
        first(loc(a, i)) == a && second(loc(a, i)) == i
    }

    axiom length_nonneg {
        forall a: Array :: len(a) >= 0
    }
}

define lookup(a, i) 
    loc(a, i).val

define update(a, i, e) {
    loc(a, i).val := e
}

define array(a)
    (forall i: Int :: {loc(a, i)}  0 <= i && i < len(a) ==> acc(loc(a, i).val)) 

define alloc(a, l) {
    inhale array(a) && len(a) == l
}